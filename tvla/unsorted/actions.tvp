%action uninterpreted() { 
  %t "uninterpreted"
}

%action Skip() { 
  %t "skip"
}


///////////////////////////////////////////////////////////////////////////
// Actions for statements manipulating pointer variables and pointer fields

%action Set_Null_L(lhs) {
  %t lhs + " = NULL"
  {
    lhs(v) = 0
  }
}

%action Copy_Var_L(lhs, rhs) {
  %t lhs + " = " + rhs
  %f { rhs(v) } 
  {
    lhs(v) = rhs(v) 
  }
}

%action Malloc_L(lhs) {
  %t lhs + " = (L) malloc(sizeof(struct node)) "
  %new
  {
    lhs(v) = isNew(v)
    t[n](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[n](v_1, v_2))
    r[n, lhs](v) = isNew(v)
    foreach(z in PVar-{lhs}) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)
  }
}

%action New(lhs) {
  %t lhs + " = new QueueElement() "
  %new
  {
    lhs(v) = isNew(v)
    t[n](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[n](v_1, v_2))
    r[n, lhs](v) = isNew(v)
    foreach(z in PVar-{lhs}) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)
    newElement(v) = isNew(v)
	deq(v_1, v_2) = (isNew(v_1) & isNew(v_2)) |           //reflexive...
                    (v_1 != v_2  & (isNew(v_1) | isNew(v_2))? 1/2 : deq(v_1, v_2))
	peq(v_1, v_2) = (isNew(v_1) & isNew(v_2)) |           //reflexive...
                    (v_1 != v_2  & (isNew(v_1) | isNew(v_2))? 1/2 : peq(v_1, v_2))

  }
}


%action Free_L(lhs) {
  %t "free(" + lhs + ")"
  %f { lhs(v) }
  %message (E(v, v_1) lhs(v) & n(v, v_1)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  {
    t[n](v_1, v_2) = t[n](v_1, v_2)
    foreach(z in PVar) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)  
  }
  %retain !lhs(v)
}

%action Get_next(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + n
  %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) &  t[n](v_2, v) }
  %message (!E(v) rhs(v)) ->
           "Illegal dereference to\n" + n + " component of " + rhs
  {
    lhs(v) = E(v_1) rhs(v_1) & n(v_1, v)
  }
}

%action Get_head(lhs, rhs) {
  %t lhs + " = " + rhs + "->head"
  %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) &  t[n](v_2, v) }
  %message (!E(v) rhs(v)) ->
           "Illegal dereference to\n" + n + " component of " + rhs
  {
    lhs(v) = E(v_1) rhs(v_1) & n(v_1, v)
  }
}




%action Set_next_Null(lhs) {
  %t lhs + "->" + n + " = NULL"
  %f { 
       lhs(v),
       // optimized change-formula for t[n] update-formula
       E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
     }
  %message (!E(v) lhs(v)) -> "Illegal dereference to\n" +
                             n + " component of " + lhs

  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
  }
}

%action Set_head_Null(lhs) {
  %t lhs + "->head = NULL"
  %f { 
       lhs(v),
       // optimized change-formula for t[n] update-formula
       E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
     }
  %message (!E(v) lhs(v)) -> "Illegal dereference to\n" +
                             n + " component of " + lhs

  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
  }
}


%action Set_next(lhs, rhs) {
  %t lhs + "->" + n + " = " + rhs
  %f {
       lhs(v), rhs(v),
       // optimized change-formula for t[n] upate-formula
       E(v_4) rhs(v_4) & t[n](v_4, v_2)
     }
  %message (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[n](v_2, v_1)) -> 
           "A cycle may be introduced\nby assignment " + lhs + "->" + n + "=" + rhs
  {
    n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
  }
}

%action Set_head(lhs, rhs) {
  %t lhs + "->head = " + rhs
  %f {
       lhs(v), rhs(v),
       // optimized change-formula for t[n] upate-formula
       E(v_4) rhs(v_4) & t[n](v_4, v_2)
     }
  %message (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[n](v_2, v_1)) -> 
           "A cycle may be introduced\nby assignment " + lhs + "->" + n + "=" + rhs
  {
    n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
  }
}

//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving pointer
// equality tests.

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %f { lhs(v) } 
  %p E(v) lhs(v)
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %f { lhs(v) } 
  %p !(E(v) lhs(v))
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %f { lhs(v), rhs(v) } 
  %p A(v) lhs(v) <-> rhs(v)
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %f { lhs(v), rhs(v) } 
  %p !A(v) lhs(v) <-> rhs(v)
}


/////////////////////////////////////////
// Actions for testing various properties

%action Assert_ListInvariants(lhs) {
  %t "assertListInvariants(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) r[n,lhs](v) & is[n](v)
  %message ( E(v) r[n,lhs](v) & is[n](v) ) -> 
           "The list pointed by " + lhs + " may be shared!"
}

%action Assert_No_Leak(lhs) {
  %t "assertNoLeak(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) !r[n,lhs](v)
  %message ( E(v) !r[n,lhs](v) ) -> 
           "There may be a list element not reachable from variable " + lhs + "!"
}


//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving comparisons
// of data elements.

%action Data_Eq(lhs, rhs) {
  %t lhs + ".data == " + rhs + ".data"
  %f { lhs(v_1) & rhs(v_2) & deq(v_1, v_2) }
  %p E(v_1, v_2) (lhs(v_1) & rhs(v_2) & deq(v_1, v_2))
  {
	deq(v_1, v_2) = deq(v_1, v_2) | ( lhs(v_1) & rhs(v_2) )
  }
}

%action Data_Not_Eq(lhs, rhs) {
  %t lhs + ".data != " + rhs + ".data"
  %f { lhs(v_1) & rhs(v_2) & deq(v_1, v_2) }
  %p !E(v_1, v_2) (lhs(v_1) & rhs(v_2) & deq(v_1, v_2))
  {
    deq(v_1,v_2) = (((lhs(v_1) & rhs(v_2)) | (rhs(v_1) & lhs(v_2))) ? 0 : deq(v_1, v_2))
  }
}

%action Set_data(lhs, rhs) {
	%t lhs + ".data = " + rhs
	%f { lhs(v), rhs(v) }
	%message (!E(v) lhs(v)) ->
           "Illegal dereference to data component of " + lhs
    {
		deq(v_1, v_2) = deq(v_1, v_2) | lhs(v_1) & rhs(v_2)
	}
}

//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving comparisons
// of priority elements.


%action Priority_Eq(lhs, rhs) {
  %t lhs + ".priority == " + rhs + ".priority"
  %f { lhs(v_1) & rhs(v_2) & peq(v_1, v_2) }
  %p E(v_1, v_2) (lhs(v_1) & rhs(v_2) & peq(v_1, v_2))
  {
	peq(v_1, v_2) = peq(v_1, v_2) | ( lhs(v_1) & rhs(v_2) )
  }
}

%action Priority_Not_Eq(lhs, rhs) {
  %t lhs + ".priority != " + rhs + ".priority"
  %f { lhs(v_1) & rhs(v_2) & peq(v_1, v_2) }
  %p !E(v_1, v_2) (lhs(v_1) & rhs(v_2) & peq(v_1, v_2))
  {
    peq(v_1,v_2) = (((lhs(v_1) & rhs(v_2)) | (rhs(v_1) & lhs(v_2))) ? 0 : peq(v_1, v_2))
  }
}

%action Set_priority(lhs, rhs) {
	%t lhs + ".priority = " + rhs
	%f { lhs(v), rhs(v)}
	%message (!E(v) lhs(v)) ->
           "Illegal dereference to priority component of " + lhs
    {
		peq(v_1, v_2) = peq(v_1, v_2) | lhs(v_1) & rhs(v_2)
	}
}

%action Copy_priority(lhs, rhs) {
  %t lhs + ".priority = " + rhs + ".priority"
  %f { lhs(v), rhs(v) }
  %message (!E(v) lhs(v)) ->
           "Illegal dereference to data component of " + lhs
  %message (!E(v) rhs(v)) ->
           "Illegal dereference to data component of " + rhs
  {
	  peq(v_1, v_2) = (lhs(v_1) & E(v)(rhs(v) & peq(v, v_2)))  // compare x.data with s.th.
	                  | (lhs(v_2) & E(v)(rhs(v) & peq(v_1, v)))        // compare x.data with s.th.
	                  | (!lhs(v_1) & !lhs(v_2) & peq(v_1, v_2))        // else: use old value

	updatedElement(v) = updatedElement(v) | lhs(v)
  }
}
