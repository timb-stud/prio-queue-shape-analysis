#######################################################################################
# Deafault templates for various Jimple patterns.
#
# NOTE
# ----
# It is assumed that the action "Skip()" is defined somewhere.
# This is used to insure that the CFG produced by the translation is a connected graph.
#######################################################################################

# A template for the initial section in the TVP file.
Prolog = // TVP prolog\n\
     tvla_entry Skip() %LEND

# A template for the final section in the TVP file.
Epilog = \n\
         // TVP epilog\n\
     %LBEGIN Skip() tvla_exit


        ########################################################################
        # Templates for assignment (and more generally, definition) statements #
        ########################################################################

# The default template of an assignment statement.
AssignStmt = \n// line %LINE : %JIMPLE (AssignStmt)\n\
         %LBEGIN Skip() %LEND

# A template for statements of the form : x = foo(...).
AssignFromInvokeStmt = \n// line %LINE : %JIMPLE (AssignFromInvokeStmt)\n\
               %MULTIPLE{%LBEGIN Skip() %LTARGET\n}

# A template for statements of the form : x = foo(...)
# where non of the target methods is modelled.
AssignFromUnmodelledInvokeStmt = \n// line %LINE : %JIMPLE (AssignFromUnmodelledInvokeStmt)\n\
                     %LBEGIN Skip() %LEND

# The default template of an assignment statement.
AssignNewClassStmt = \n// line %LINE : %JIMPLE (AssignNewClassStmt)\n\
                 %LBEGIN New(%LHS) %LEND

# The default template of an assignment statement.
AssignNewArrayStmt = \n// line %LINE : %JIMPLE (AssignNewArrayStmt)\n\
                 %LBEGIN Skip() %LEND

# A template for statements of the form : x = y
# where x and y are local reference variables.
AssignRefToRefStmt = \n// line %LINE : %JIMPLE (AssignRefToRefStmt)\n\
             %LBEGIN Copy_Var_L(%LHS, %RHS) %LEND

# A template for statements of the form : x = @caughtexception
# where x ais a local reference variables.
CaughtExceptionAssignmentStmt = \n// line %LINE : %JIMPLE (CaughtExceptionAssignmentStmt)\n\
                    %LBEGIN Skip() %LEND

# A template for statements of the form : x = null
# where x is a local reference variable.
AssignNullToLocalStmt = \n// line %LINE : %JIMPLE (AssignNullToLocalStmt)\n\
                %LBEGIN Set_Null_L(%LHS) %LEND

# A template for statements of the form : x.n = y
# where y is a reference variable and n is a reference field.
AssignRefToInstanceFieldRefStmt = \n// line %LINE : %JIMPLE (AssignRefToInstanceFieldRefStmt)\n\
                      %LBEGIN Set_%LHS_FIELD_Null(%LHS_BASE); Set_%LHS_FIELD(%LHS_BASE, %RHS) %LEND

# A template for statements of the form : x.n = null
# where n is a reference field.
AssignNullToInstanceFieldRefStmt = \n// line %LINE : %JIMPLE (AssignNullToInstanceFieldRefStmt)\n\
                       %LBEGIN Set_%LHS_FIELD_Null(%LHS_BASE) %LEND

# A template for statements of the form : x = y.n
# where x is a reference variable and n is a reference field.
AssignInstanceFieldRefToRefStmt = \n// line %LINE : %JIMPLE (AssignInstanceFieldRefToRefStmt)\n\
                      %LBEGIN Get_%RHS_FIELD(%LHS, %RHS_BASE) %LEND

# A template for statements of the form : CLASS.field = y
# where y is a reference variable and 'field' is a static reference field.
AssignRefToStaticFieldRefStmt = \n// line %LINE : %JIMPLE (AssignRefToStaticFieldRefStmt)\n\
                    %LBEGIN Skip() %LEND

# A template for statements of the form : x.n = null
# where n is a static reference field.
AssignNullToStaticFieldRefStmt = \n// line %LINE : %JIMPLE (AssignNullToStaticFieldRefStmt)\n\
                     %LBEGIN Skip() %LEND

# A template for statements of the form : x = CLASS.field
# where y is a reference variable and 'field' is a static reference field.
AssignStaticFieldRefToRefStmt = \n// line %LINE : %JIMPLE (AssignStaticFieldRefToRefStmt)\n\
                    %LBEGIN Skip() %LEND

# A template for statements of the form : x[...] = y
# where y is a reference variable and x is an array of references
AssignRefToArrayRefStmt = \n// line %LINE : %JIMPLE (AssignRefToArrayRefStmt)\n\
              %LBEGIN Skip() %LEND

# A template for statements of the form : x = y[...]
# where x is a reference variable and y is an array of references
AssignArrayRefToRefStmt = \n// line %LINE : %JIMPLE (AssignArrayRefToRefStmt)\n\
              %LBEGIN Skip() %LEND


        ########################################
        # Templates for conditional statements #
        ########################################

# This statement is handled conservatively, by adding transitions to both targets
# (the fall though target and the one intended by the condition).
IfStmt = \n// line %LINE : %JIMPLE (IfStmt)\n\
     %LBEGIN Skip() %LTRUE\n\
     %LBEGIN Skip() %LFALSE

# A template for statements of the form : if (x == y).
# The macro %LHS corresponds to x and the macro %RHS corresponds to y.
IfEqualStmt = \n// line %LINE : %JIMPLE (IfEqualStmt)\n\
          %LBEGIN Skip() %LTRUE\n\
          %LBEGIN Skip() %LFALSE

# A template for statements of the form : if (x == null).
# The macro %LHS corresponds to x.
IfEqualToNullStmt = \n// line %LINE : %JIMPLE (IfEqualToNullStmt)\n\
                %LBEGIN Is_Null_Var(%LHS) %LTRUE\n\
                %LBEGIN Is_Not_Null_Var(%LHS) %LFALSE

# A template for statements of the form : if (b).
# The macro %LHS corresponds to b.
IfBoolStmt = \n// line %LINE : %JIMPLE (IfBoolStmt)\n\
         %LBEGIN Skip() %LTRUE\n\
         %LBEGIN Skip() %LFALSE

# A template for statements of the form : if (b1 == b2).
# The macro %LHS corresponds to b1 and the macro %RHS corresponds to b2.
IfEqualBoolStmt = \n// line %LINE : %JIMPLE (IfEqualBoolStmt)\n\
              %LBEGIN Skip() %LTRUE\n\
              %LBEGIN Skip() %LFALSE

# A template for statements of the form : if (x == y)
# where both x and y are reference variables.
# The macro %LHS corresponds to b1 and the macro %RHS corresponds to b2.
IfEqualRefStmt = \n// line %LINE : %JIMPLE (IfEqualRefStmt)\n\
              %LBEGIN Skip() %LTRUE\n\
              %LBEGIN Skip() %LFALSE


        ########################################
        # Templates for call/return statements #
        ########################################

# A template for procedure calls.
InvokeStmt = \n// line %LINE : %JIMPLE (InvokeStmt)\n\
         %MULTIPLE{%LBEGIN Skip() %LTARGET\n}

# A template for statements of the form : foo(...)
# where non of the target methods is modelled.
UnmodelledInvokeStmt = \n// line %LINE : %JIMPLE (UnmodelledInvokeStmt)\n\
               %LBEGIN Skip() %LEND

RetStmt = \n// line %LINE : %JIMPLE (RetStmt) not modelled\
      %LBEGIN Skip() %LEND

# A template for statements of the form : return v.
ReturnStmt = \n// line %LINE : %JIMPLE (ReturnStmt)\n\
         %LBEGIN Skip() %%LCOMMON\n\
         %MULTIPLE{%%LCOMMON Skip() %LTARGET\n}

# A template for statements of the form : return.
ReturnVoidStmt = \n// line %LINE : %JIMPLE (ReturnVoidStmt)\n\
         %MULTIPLE{%LBEGIN Skip() %LTARGET\n}


        #########################################
        # Templates for miscelaneous statements #
        #########################################

GotoStmt = \n// line %LINE : %JIMPLE (GotoStmt)\n\
       %LBEGIN Skip() %LTARGET

NopStmt = \n// line %LINE : %JIMPLE (NopStmt)\n\
      %LBEGIN Skip() %LEND

LookupSwitchStmt = \n// line %LINE : %JIMPLE (LookupSwitchStmt)\n\
           %MULTIPLE{%LBEGIN Skip() %LTARGET\n}

TableSwitchStmt = \n// line %LINE : %JIMPLE (TableSwitchStmt)\n\
          %MULTIPLE{%LBEGIN Skip() %LTARGET\n}

ThrowStmt = \n// line %LINE : %JIMPLE (ThrowStmt) not modelled\
        %LBEGIN Skip() %LEND

BreakpointStmt = \n// line %LINE : %JIMPLE (BreakpointStmt)\n\
         %LBEGIN Skip() %LEND

EnterMonitorStmt = \n// line %LINE : %JIMPLE (EnterMonitorStmt)\n\
           %LBEGIN Skip() %LEND

ExitMonitorStmt = \n// line %LINE : %JIMPLE (ExitMonitorStmt)\n\
          %LBEGIN Skip() %LEND

Trap        = \n// line %LINE : (Trap)\n\
          //%LBEGIN Skip() %LEND
